digraph D {
	fontname="sans";
	//rankdir=LR;
	penwidth="2.0"
	edge [penwidth=1.5]
	node [penwidth=2.0]

	subgraph cluster_sensors {
		label = "sensors";
		camera_node [!NODE:compiled!, label="pi_camera\ncamera_node (SY,AC)"];
		joy_node [!NODE:tested!, label="joy_node"];
 		joy[!TOPIC!, label="joy\nsensor_msgs/Joy.msg"];
 		
 		image_compressed[!TOPIC!, label="~image/compressed\nsensor_msgs/CompressedImage.msg"];
 		camera_node->image_compressed;
	}

	subgraph cluster_legend{
		label="legend";
		missing     [!NODE:missing!,     label="missing"];
		designed    [!NODE:designed!,    label="designed"];
		development [!NODE:development!, label="development"];
		compiled    [!NODE:compiled!,    label="compiled"];
		documented  [!NODE:documented!,  label="documented"];
		tested      [!NODE:tested!,      label="tested"];
		missing->designed->development->compiled->documented->tested;
	}


	//global_localizer[!NODE:missing!, label="global_localizer_node (LC)"];
	lane_supervisor_node[!NODE:missing!, label="lane_control\nlane_supervisor_node (LP)"];


	safety_supervisor_node      [!NODE:designed!,  label="safety_supervisor_node (HA)"];
	veh_coordinator_node        [!NODE:designed!,  label="veh_coordinator_node (DH)"]
	//slam_node                   [!NODE:designed!,  label="slam\nslam_node (LC)"];
	//navigation_verification_node[!NODE:designed!,  label="navigation_verification\nnavigation_verification_node (??)"];

	
	open_loop_intersection_control_node[!NODE:development!,  label="intersection_control\nopen_loop_intersection_control_node (MN)"];
	stop_line_filter_node[!NODE:development!,  label="stop_line_filter\nstop_line_filter_node (LP)"];
	//rgb_LED_driver_node[label="rgb_LED_driver\nrgb_LED_driver_node (DY)"];
	fsm_node[!NODE:development!,  label="fsm\nfsm_node (MN)"];
	//graph_planner_node[!NODE:development!,  label="graph_planner\ngraph_planner_node (??)"];
	//mission_planner_node[!NODE:development!,  label="mission_planner\nmission_planner_node (MN)"];
	
	
	

	
	
	wheels_cmd_switch_node[!NODE:compiled!, label="dagu_car\ncar_cmd_switch (SY)"]
	
	decoder_node[!NODE:compiled!, label="pi_camera\ndecoder_node (SY)"];
	cam_info_reader_node[!NODE:compiled!, label="pi_camera\ncam_info_reader_node (SY)"];
	
	line_detector_node[!NODE:compiled!, label="line_detector\nline_detector_node (LP,HZ)"];
	
	joy_mapper_node[!NODE:compiled!, label="joy_mapper\njoy_mapper_node (SY)"];
	ground_projection_node[!NODE:compiled!, label="ground_projection\nground_projection_node (CC)"];
	

	// === Files Definition ===
	//motion_calibration_file[!CONFIG!, label="calibration/wheels_trim"];
	extrinsic_calibration_file[!CONFIG!, label="calibration/camera_extrinsic"];
	intrinsic_calibration_file[!CONFIG!, label="calibration/camera_intrinsic"];
	//navigation_graph_file[!CONFIG!, label="??/navigation_graph_file"];
	//feature_map_file[!CONFIG!, label="??/feature_map_file"];
	
	//map_representation[!TOPIC!, label="~map_representation"];
	segment_list[!TOPIC!, label="~segment_list\nduckietown_msgs/SegmentList.msg"];
	segment_list_proj[!TOPIC!, label="~segment_list_proj\nduckietown_msgs/SegmentList.msg"];
	image_with_lines[!TOPIC!, label="~image_with_lines\nsensor_msgs/Image.msg"];
	
	
	lane_control_sup[!TOPIC!, label="~lane_control_supervised\nduckietown_msgs/WheelsCmdStamped.msg"];
	lane_control_safe[!TOPIC!, label="~lane_control_safe\nduckietown_msgs/WheelsCmdStamped.msg"];
	
	//obj_detection[!TOPIC!, label="~obj_detection"];
	//global_readings[!TOPIC!, label="~global_readings"];
	mode[!TOPIC!, label="~mode\nduckietown_msgs/FSMState.msg"];
	joy_control[!TOPIC!, label="~joy_control\nduckietown_msgs/WheelsCmdStamped.msg"];
	intersection_control[!TOPIC!, label="~intersection_control\nduckietown_msgs/WheelsCmdStamped.msg"];
	//street_name_detection[!TOPIC!, label="~street_name_detection\nduckietown_msgs/StreetNameDetection.msg"];
	wheels_command_switch[!TOPIC!, label="~car_command_switch\nduckietown_msgs/Twist2DStamped.msg"];

	camera_info[!TOPIC!, label="camera_node/camera_info\nsensor_msgs/CameraInfo.msg"];
	
	intersection_go[!TOPIC!, label="~intersection_go\nstd_msgs/Bool.msg"];
	intersection_done[!TOPIC!, label="~intersection_done\nstd_msgs/Bool.msg"];
	at_stop_line[!TOPIC!, label="~at_stop_line\nstd_msgs/Bool.msg"];
	
	stop_line_dist[!TOPIC!, label="~stop_line_dist\nstd_msgs/Float32.msg"];
	


	

	// ==== Connections ====
	
	// fsm_node
	{intersection_go,intersection_done,at_stop_line,in_lane, veh_avoidance_flag, object_too_close} -> fsm_node;
	fsm_node->mode;
	
	// == open_loop_intersection_control_node == //
	open_loop_intersection_control_node->{intersection_control, intersection_done};
	mode->open_loop_intersection_control_node;	

	// == stop_line_filter_node == //
	stop_line_filter_node -> {at_stop_line, stop_line_dist};
	segment_list_proj->stop_line_filter_node;
 

	

	// == cam_info_reader_node == //
	intrinsic_calibration_file->cam_info_reader_node[style="dotted"];
	image_compressed->cam_info_reader_node;
	cam_info_reader_node->camera_info;
	
	// == decoder_node == //
	image_compressed->decoder_node;
	decoder_node->image_raw;
	
	// == street_name_detector_node == //
	//image_compressed->street_name_detector_node;
	//street_name_detector_node->street_name_detection;
	
		
	// == line_detector_node == //
	line_detector_node -> {segment_list, image_with_lines};
	image_compressed -> line_detector_node;

	// == global_localizer == //
	//{obj_detection, street_name_detection, apriltag_detection, map_representation} -> global_localizer;
	//global_localizer->global_readings;

	// == joy_mapper_node == //
	joy_node->joy->joy_mapper_node->joy_control;

	// == lane_supervisor_node == //
	{joy_control, lane_control}-> lane_supervisor_node;
	lane_supervisor_node-> lane_control_sup;
	
	// == safety_supervisor_node == //
	{lane_control_sup, obs_pose} -> safety_supervisor_node;
	safety_supervisor_node->lane_control_safe;


	// == ground_projection_node == //
	extrinsic_calibration_file->ground_projection_node[style="dotted"];
	{camera_info,segment_list}->ground_projection_node;
	ground_projection_node->segment_list_proj;
	
	// == veh_coordinator_node == //
	{obs_pose,signals_detection,mode} -> veh_coordinator_node;
	veh_coordinator_node->intersection_go;

	// == wheels_cmd_switch_node == //
	{mode, lane_control, intersection_control, veh_avoidance_control, simple_stop_control, modap_conntrol}->wheels_cmd_switch_node;	
	wheels_cmd_switch_node->wheels_command_switch;
	
	//// == wheels_trimmer_node == //	
	//motion_calibration_file->wheels_trimmer_node[style="dotted"]
	//wheels_command_switch->wheels_trimmer_node;
	//wheels_trimmer_node->wheels_command;

	// == wheels_driver_node == //
	wheels_command->wheels_driver_node;

	// == graph_planner_node == //
	//navigation_graph_file->graph_planner_node[style="dotted"];

	// == slam_node == //
	//slam_node->feature_map_file[style="dotted"];


////////// = F1 = //
	subgraph cluster_f1{ !FEATURE!
		label="F1: Illumination Robustness"; 
		anti_instagram_node[!NODE:development!,  label="anti_instagram\nanti_instagram_node (F1)"];
		corrected_image[!TOPIC!, label="~corrected_image/compressed\nsensor_msgs/CompressedImage.msg"];
		image_health[!TOPIC!, label="~image_health\nduckietown_msgs/AntiInstagramHealth.msg"];
	}

	// == anti_instagram_node == //
	image_compressed->anti_instagram_node;
	anti_instagram_node->{corrected_image,image_health};



////////////F2-3//
	subgraph feature_f23 { 
		!FEATURE!
		label="F2-3: LED Detection";
		
		LED_emitter_node     [!NODE:development!, label="LED\nLED_emitter_node"    ];
		LED_detector_node    [!NODE:development!, label="LED\nLED_detector_node"   ];
		LED_interpreter_node [!NODE:development!, label="LED\nLED_interpreter_node"];
		LED_joystick_node    [!NODE:development!, label="LED\nLED_joystick_node"   ];
		
		desired_signaling_state [!TOPIC!, label="~desired_signaling_state\nduckietown_msgs/CoordinationSignal.msg"];
		raw_led_detection       [!TOPIC!, label="~raw_led_detection\nled_detection/LEDDetectionArray.msg"];
		signals_detection       [!TOPIC!, label="~signals_detection\nled_detection/SignalsDetection.msg"];
	}

	// the joystick is connected to LED_joystick_node, which produces a desired_signaling_state
	joy->LED_joystick_node->desired_signaling_state;
	
	// LED_emitter_node reads desired_signaling_state and activates the LED
	desired_signaling_state->LED_emitter_node;

	// Image goes to LED_detector_node which produces "raw" led detections
	image_compressed->LED_detector_node->raw_led_detection;
	// These are interpreted by LED_interpreter_node
	raw_led_detection->LED_interpreter_node->signals_detection;
	// the node also needs to know where the vehicle is
	{stop_line_dist, lane_pose} -> LED_interpreter_node;
 

///////// = F4 = //
	subgraph cluster_f4 { 
		!FEATURE!
		label="F4: Odometry Calibration from Sensor Measurements";
		odometry_training_pairs_node[!NODE:development!,  label="visual_odometry\nodometry_training_pairs_node (F4)"];
		kinematics_learning_node[!NODE:development!,  label="kinematics\nkinematics_learning_node (F4)"];
		inverse_kinematics_node[!NODE:development!,  label="kinematics\ninverse_kinematics_node (F4)"];
		forward_kinematics_node[!NODE:development!,  label="kinematics\nforward_kinematics_node (F4)"];

		inverse_kinematics_file[!CONFIG!, label="calibration/inverse_kinematics"];
		kinematics_file[!CONFIG!, label="calibration/forward_kinematics"];
		odometry_training_pairs_file[!CONFIG!, label="???/odometry_training_pairs"];
	
		forward_kinematics_pose[!TOPIC!, label="~pose\nduckietown_msgs/Pose2DStamped.msg"];
		forward_kinematics_velocity[!TOPIC!, label="~velocity\nduckietown_msgs/Twist2DStamped.msg"];

		wheels_command[!TOPIC!, label="wheels_driver_node/wheels_cmd\nduckietown_msgs/WheelsCmdStamped.msg"];
	
		wheels_driver_node[!NODE:compiled!, label="dagu_car\nwheels_driver_node (DY,SY)"];
	}


	// == odometry_training_pairs_node == //
	{image_compressed,apriltag_detection,segment_list_proj, wheels_command_switch} -> odometry_training_pairs_node;
	odometry_training_pairs_node -> odometry_training_pairs_file[style="dotted"];

	// == kinematics_learning_node == //
	odometry_training_pairs_file -> kinematics_learning_node[style="dotted"]
	kinematics_learning_node -> {inverse_kinematics_file, kinematics_file}[style="dotted"];

	// == inverse_kinematics_node == //
	inverse_kinematics_file -> inverse_kinematics_node[style="dotted"];
	wheels_command_switch -> inverse_kinematics_node;
	inverse_kinematics_node -> wheels_command;

	// == forward_kinematics_node == //
	kinematics_file -> forward_kinematics_node[style="dotted"];
	wheels_command -> forward_kinematics_node;
	forward_kinematics_node -> {forward_kinematics_pose,forward_kinematics_velocity};


/////////// F6 //
	subgraph cluster_f6 { 
		!FEATURE!
		label="F6: Vehicle Detection"; 

		vehicle_detector_node[!NODE:development!,  label="veh_detector\nvehicle_detector_node (F6)"];
		vehicle_filter_node[!NODE:development!,  label="veh_detector\nvehicle_filter_node (F6)"];
		vehicle_avoidance_control_node[!NODE:development!,  label="veh_detector\nvehicle_avoidance_control_node (F6)"];

		obs_corners[!TOPIC!, label="~corners\nduckietown_msgs/ObstacleCorners.msg"];
		obs_pose[!TOPIC!, label="~obstacle_pose\nduckietown_msgs/ObstaclePose.msg"];
		veh_avoidance_control[!TOPIC!, label="~control\nduckietown_msgs/WheelsCmdStamped.msg"];
		veh_avoidance_flag[!TOPIC!, label="~flag\nduckietown_msgs/BoolStamped.msg"];

	}

	// == vehicle_detector_node == //
	image_compressed -> vehicle_detector_node;
	vehicle_detector_node -> obs_corners;
	// == vehicle_filter_node == //
	obs_corners -> vehicle_filter_node;
	vehicle_filter_node -> obs_pose;
	// == vehicle_avoidance_control_node == //
	obs_pose -> vehicle_avoidance_control_node;
	vehicle_avoidance_control_node -> {veh_avoidance_control, veh_avoidance_flag};

////////// F8 //
	subgraph cluster_f8 { 
		!FEATURE!
		label="F8: Apriltags"; 
	
		tags_map_file[!CONFIG!, label="map/tags_map.yaml"];
	
		apriltag_detector_node[!NODE:compiled!, label="apriltags\napril_tag_detector (LP)"];

		apriltag_detection[!TOPIC!, label="~apriltag_detection\nduckietown_msgs/AprilTags.msg"];
		
		apriltag_info_node[!NODE:development!,  label="apriltags\napriltag_info_node (F8)"];

		apriltag_detection_with_info[!TOPIC!, label="~apriltag_detection_with_info\nduckietown_msgs/AprilTags.msg"];

	}
	// == apriltag_detector_node == //
	image_compressed->apriltag_detector_node;
	apriltag_detector_node->apriltag_detection;
	// == apriltag_info_node == //
	tags_map_file -> apriltag_info_node[style="dotted"];
	apriltag_detection -> apriltag_info_node;
	apriltag_info_node -> apriltag_detection_with_info;


//////////// F9 //
	subgraph cluster_f9 { 
		!FEATURE!
		label="F9: MDOAP"; 

		object_image_detection_list[!TOPIC!, label="~detection_list\nduckietown_msgs/ObjectImageDetectionList.msg"];
		object_too_close[!TOPIC!, label="~object_too_close\nduckietown_msgs/BoolStamped.msg"];
		object_projected_detection_list[!TOPIC!, label="~detection_list_proj\nduckietown_msgs/ObjectProjectedDetectionList.msg"];
		object_detection_markers[!TOPIC!, label="~object_detection_markers\nvisualization_msgs/MarkerArray.msg"];
		simple_stop_control[!TOPIC!, label="~control\nduckietown_msgs/Twist2DStamped.msg"];
		modap_control[!TOPIC!, label="~control\nduckietown_msgs/Twist2DStamped.msg"];

		static_object_detector_node[!NODE:development!,  label="mdoap\nstatic_object_detector_node (F9)"];
		obstacle_safety_node       [!NODE:development!,  label="mdoap\nobstacle_safety_node (F9)"];
		simple_stop_controller_node[!NODE:development!,  label="mdoap\nsimple_stop_controller_node (F9)"];
		mdoap_controller_node      [!NODE:development!,  label="mdoap\nmdoap_controller_node (F9)"];
	}

	// == static_object_detector_node ==//
	image_compressed->static_object_detector_node;
	static_object_detector_node->object_image_detection_list;
	// == obstacle_safety_node == //
	object_image_detection_list -> obstacle_safety_node;
	obstacle_safety_node -> {object_too_close,object_projected_detection_list,object_detection_markers};
	// == simple_stop_controller_node == //
	{object_projected_detection_list, object_too_close} -> simple_stop_controller_node;
	simple_stop_controller_node -> simple_stop_control;
	//TODO: publish to the wheels cmd swtich

	// == mdoap_controller_node == //
	{object_projected_detection_list, object_too_close} -> mdoap_controller_node;
	mdoap_controller_node -> modap_conntrol;

	
	//F5
	subgraph cluster_f5 { !FEATURE!
		label="F5: Lane Filter and Control"; 

		lane_filter_node[!NODE:compiled!, label="lane_filter\nlane_filter_node (LP)"]; 

		lane_controller_node[!NODE:compiled!, label="lane_control\nlane_controller_node (SY,SC)"];
		lane_pose[!TOPIC!, label="~lane_pose\nduckietown_msgs/LanePose.msg"]; //LaneReading: y, phi, sigma_y, sigma_phi, status
		in_lane[!TOPIC!, label="~in_lane\nstd_msgs/Bool.msg"];
		
		ref_traj_gen_node[!NODE:development!,  label="lane_filter\nref_traj_gen_node (F5)"];

		ref_traj[!TOPIC!, label="~ref_traj\nduckietown_msgs/Trajectory.msg"];

		lane_control[!TOPIC!, label="~lane_control\nduckietown_msgs/WheelsCmdStamped.msg"];
	}

	// == lane_controller_node == //
	lane_pose->lane_controller_node;
	lane_controller_node->lane_control;

	// == lane_filter_node == //
	{segment_list_proj, wheels_command_switch} -> lane_filter_node;
	lane_filter_node -> {lane_pose, in_lane};

	// == ref_traj_gen_node == //
	segment_list_proj -> ref_traj_gen_node;
	ref_traj_gen_node -> ref_traj;


}